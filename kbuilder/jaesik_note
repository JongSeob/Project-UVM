============================================ 0. Data::Printer =======================================================
변수가 가리키고 있는 값을 보기 좋게 출력해줌.
# [예제 코드]
use Data::Printer;

my $ref = {
    A => [
        1, 2, 3, 4, 5
    ],
    B => [
        6, 7, 8, 9, 10
    ]
};

p $ref;

## [출력 결과]
# {
#     A   [
#         [0] 1,
#         [1] 2,
#         [2] 3,
#         [3] 4,
#         [4] 5
#     ],
#     B   [
#         [0] 6,
#         [1] 7,
#         [2] 8,
#         [3] 9,
#         [4] 10
#     ]
# }


============================================ 1. FindBin =============================================================
FindBin : 실행되는 현재 코드의 위치를 따옴.

##################################
# $home/00_Perl2Py/findbin.pl
##################################
use FindBin qw($Bin);
use lib "$Bin/../lib";
print "$Bin\n";
###################################
# 결과 : /home/jaesik/00_Perl2Py
###################################

============================================ 2. Template ============================================================
###################################
# $home/00_Perl2Py/template.pl
###################################
다운로드 : $ sudo cpan Template
예제 : https://www.oreilly.com/library/view/perl-template-toolkit/0596004761/ch01.html
파일에서 [% 변수명 %] 으로 적혀져있는 템플릿 파일에 변수명 => 값 을 인가할 수 있음.
(ex)
##################################
# template.tt
내가 사는 곳은 [% planet %] 이다
##################################
# template.pl
use Template;
my $tt = Template->new();
my $input = 'template.tt'
my $vars = { planet => 'Earth',}; - template.pl
$tt->process($input, $vars) || die $tt->error();
#################################
# 결과 :
내가 사는 곳은 Earth 이다
#################################
template.tt 에서, [% planet = 20 %] 을 미리 지정해두면
내가 사는 곳은 20 이다
라고 출력됨.

#################################
# myfile.tt2
#################################
신기한건, 템플릿 파일 자체에서 뭔가를 할 수 있다는거다.
(1) 값 지정
template.tt 에서, [% planet = 20 %] 을 미리 지정해두면
내가 사는 곳은 20 이다
라고 출력됨.
(2) 내용 Include
Hi [% INCLUDE bar %] 안녕
[% BLOCK bar %] Hello [% END %]
이라하면, Hi 안녕 Hello 가 아니라 Hi Hello 안녕 이 됨.
(3) IF, ELSIF, ELSE 도 사용가능. (그 외 switch case, while, foreach 등등도 마찬가지로 사용가능하다)
[% IF age < 10 %] Hello [% END %] 이고 age 를 8로 설정하고 process 했다면 Hello 가 출력됨.

============================================ 3. Verilog =============================================================
============================================ 4. Getopt:Long =========================================================
펄 코드에 옵션 던지는 패키지임.
#############################
# getopt.pl
#############################
GetOptions ( 'name=s' => \$name, 'employed!' => \$employed, );
print "I am $name, and". ($employed? '':'un'). "employed.\n";
#############################
# 실행 : perl getopt.pl -name Jaesik -employed
# 결과 : I am Jaesik, and employed.
#############################

========================================= 5. File::Find =============================================================
펄 코드가 실행되는 위치에서부터 하위 디렉토리까지 찾음
##############################
# filefind.pl
##############################
find ( { wanted -> \&findfiles, }, 'template' );
sub findfiles { print "$File::Find::name, "; }
#############################
디렉토리 예시 : template/dummy/template
결과 : template, template/dummy, template/dummy/template
#############################


========================================= 6. File::Path =============================================================
디렉토리 만들고 삭제하는거임
##########################
# filepath.pl
#########################
use File::Path qw(make_path remove_tree);
@created = make_path('foo/bar/baz');
make_path('foo/bar/baz'); # 디렉토리 생성!
$remove_count = remove_tree('foo/bar/baz'); # foo/bar 까지는 살아있고 baz 만 삭제!

========================================= 7. File::Copy =============================================================
그냥 파일 복사 해주는거임
#######################
# filecopy.pl
use File::Copy;
$newfile = 'new.dat';
$oldfile = 'old.dat';
copy($newfile, $oldfile);
#######################
위와 같을때, new.dat 이 $PWD 에 생성되며 내용은 old.dat 과 같음
========================================= 8. File::Temp =============================================================
그냥 파일의 핸들러를 받아오는 거임
###############################
# filetemp.pl
use File::Temp 'tempfile';
use File::Copy 'move';
my $file = shift;
my $old = get_content($file);
my $new = $old . "ADDED NEW TEXT";
my ($tempfh, $tempfile) = tempfile;
print $tempfh $new;
close $tempfh;
move $tempfile, $file || die "Can't move";
sub get_content {
    my $file = shift;
    open my $fh, '<', $file || die "Cannot open";
    my $content = join('', <$fh>);
    close $fh;
    return $content;
}
################################
입력 : perl filetemp.pl temp.tt2
결과 : temp.tt2 의 마지막 줄에 ADDED NEW TEXT 가 찍힘.


========================================= 9. File::Basename =========================================================
별건아니고 파일 이름과 확장자, 디렉토리를 string 변수로 편하게 받을 수 있다.
###############################
# filebasename.pl
use File::Basename;
$fullname = "foo/bar/desturction.tt";
$file = basename($fullname);
$dir = dirname($fullname);
print "\$file = $file, \$dir = $dir\n"; 
($file, $dir, $ext) = fileparse($fullname, qr/\.[^.]*/);
print "\$file = $file, \$dir = $dir, \$ext = $ext\n"; 
################################
# 결과
$file = desturction.tt $dir = foo/bar
$file = destruction, $dir = foo/bar, $ext = .tt
################################

========================================= 10. IO::File ==============================================================
파일을 열고 내용을 읽어들이거나 수정하기 위함
###################################
# iofile.pl
use IO::File;
$fh = IO::File->new();
if($fh->open("< destruction.tt")){ # destruction.tt 를 읽어들인다.
    print <$fh>;                   # destruction.tt 의 내용을 출력한다.
    $fh->close;                    # file 을 닫는다.
}
$fh = IO::File->new("> destruction.tt");     # destruction.tt 에 쓸 것이다.
    print $fh "It is erased by iofile.pl "; # 내용이 써진다.
    $fh->close;
}
$fh = IO::File->new("destruction.tt", "r");    # destruction.tt 를 읽는다.
if(defined $fh){
    print <$fh>;
    undef $fh;
}
$fh = IO::File->new("destruction.tt", O_WRONLY|O_APPEND);   # destruction.tt 를 쓸 것이다.
if(defined $fh){
    print $fh "Second line added\n";
    $pos = $fh->getpos;
    $fh->setops($pos);
    undef $fh;
}
################################
# 결과
destruction.tt 의 원래 내용 : Everything is destructed...
실행 후 destruction.tt 의 : It is erased by iofile.pl Second line added
################################
========================================= 11. Cwd ===================================================================
getcwd 로 현재 파일이 실행되는 위치를 얻거나 명명된 파일의 path 를 얻을 수 있음.
######################
# cwd.pl
use Cwd;
my $dir = getcwd;
print "\$dir = $dir\n";

use Cwd 'abs_path';
my $abs_path = abs_path("destruction.tt");
print "\$abs_path = $abs_path\n";
######################
결과 :
$dir = /home/jaesik/00_Perl2Py
$abs_path = /home/jaesik/00_Perl2Py/destruction.tt
######################
========================================= 12. Pod::Usage ============================================================
========================================= 13. IO::Tee ===============================================================
한번에 여러개의 파일의 핸들을 가져갈 수 있다는데 적절한 예제는 못찾음...
###########################################
# iotee.pl
use IO::Tee;
open my $ofh, '>>', 'destruction.tt' || die "Cannot open";
my $tee = IO::Tee->new(\*STDOUT, $ofh);
print $tee "This is a string\n";
############################################
결과 : destruction.tt 의 마지막줄에 "This is a string\n" 이 쓰여짐.
############################################
========================================= 14. File::Glob ============================================================
========================================= 15. Symbol ================================================================
...?
========================================= 16. JSON::MaybeXS =========================================================
========================================= 17. Encode ================================================================
========================================= 18. Data::Dumper ==========================================================
변수, array, hash 를 보기 좋게 프린트해주는 정도..?
##################################
# datadumper.pl
use Data::Dumper;
$varname = 10; @varname2 = (10, 20, 30, 40); %varname3 = (first => 10, second => 20, third =>30 );
print Dumper($varname);
print Dumper(\@varname2);
print Dumper(\%varname3);
print "Sequencely...\n";
print Dumper($varname, \@varname2, \%varname3);
##################################
# 결과 :
$VAR1 = 10;
$VAR1 = [
            10,
            20,
            30,
            40
         ];
$VAR1 = {
            'fourth' => 40,
            'third' => 30,
            'first' => 10,
            'second' => 20
         };
Sequencely...
$VAR1 = 10;
$VAR2 = [
            10,
            20,
            30,
            40
         ];
$VAR3 = {
            'fourth' => 40,
            'third' => 30,
            'first' => 10,
            'second' => 20
         };

##########################################
========================================= 19. Capture::Tiny =========================================================
========================================= 20. Log::Log4perl =========================================================


=========================================== jinja2 =======================================
# template/index.html
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8"/>
    <title>Proba<title>
        <body>
          <center>
            <h1>Proba</h1>
            <p>{{ urls|length }} links</p>
          </center>
          <ol align="left">
            {% set counter = 0 -%}
            {% for url in urls -%}
            <li><a href="{{ url }}">{}</a></li>
            {% set counter = counter + 1 -%}
            {% endfor -%}
          </ol>
        </body>
</html>

# 0_jinia.py
from jinja2 import Environment, FileSystemLoader
import os

PATH = os.path.dirname(os.path.abspath(__file__));
TEMPLATE_ENVIRONMENT = Environment(
        autoescape=False,
        loader=FileSystemLoader(os.path.join(PATH, 'template')),
        trim_blocks=False)

def render_template(template_filename, context):
    return TEMPLATE_ENVIRONMENT.get_template(template_filename).render(context)

def create_index_html():
    fname = "output.html";
    urls = ['http://example.com/1', 'http://example.com/2', 'http://example.com/3']
    context = {
            'urls': urls
            }
    with open(fname, 'w') as f:
        html = render_template('index.html', context)
        f.write(html)

def main():
    create_index_html()

if __name__ == "__main__":
    main()
    
    

jinja2 UVM template project : https://github.com/fvutils/vte

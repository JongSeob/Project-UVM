============================================ 0. Data::Printer =======================================================
변수가 가리키고 있는 값을 보기 좋게 출력해줌.
# [예제 코드]
use Data::Printer;

my $ref = {
    A => [
        1, 2, 3, 4, 5
    ],
    B => [
        6, 7, 8, 9, 10
    ]
};

p $ref;

## [출력 결과]
# {
#     A   [
#         [0] 1,
#         [1] 2,
#         [2] 3,
#         [3] 4,
#         [4] 5
#     ],
#     B   [
#         [0] 6,
#         [1] 7,
#         [2] 8,
#         [3] 9,
#         [4] 10
#     ]
# }


============================================ 1. FindBin =============================================================
FindBin : 실행되는 현재 코드의 위치를 따옴.

##################################
# $home/00_Perl2Py/findbin.pl
##################################
use FindBin qw($Bin);
use lib "$Bin/../lib";
print "$Bin\n";
###################################
# 결과 : /home/jaesik/00_Perl2Py
###################################

============================================ 2. Template ============================================================
###################################
# $home/00_Perl2Py/template.pl
###################################
다운로드 : $ sudo cpan Template
예제 : https://www.oreilly.com/library/view/perl-template-toolkit/0596004761/ch01.html
파일에서 [% 변수명 %] 으로 적혀져있는 템플릿 파일에 변수명 => 값 을 인가할 수 있음.
(ex)
##################################
# template.tt
내가 사는 곳은 [% planet %] 이다
##################################
# template.pl
use Template;
my $tt = Template->new();
my $input = 'template.tt'
my $vars = { planet => 'Earth',}; - template.pl
$tt->process($input, $vars) || die $tt->error();
#################################
# 결과 :
내가 사는 곳은 Earth 이다
#################################
template.tt 에서, [% planet = 20 %] 을 미리 지정해두면
내가 사는 곳은 20 이다
라고 출력됨.

#################################
# myfile.tt2
#################################
신기한건, 템플릿 파일 자체에서 뭔가를 할 수 있다는거다.
(1) 값 지정
template.tt 에서, [% planet = 20 %] 을 미리 지정해두면
내가 사는 곳은 20 이다
라고 출력됨.
(2) 내용 Include
Hi [% INCLUDE bar %] 안녕
[% BLOCK bar %] Hello [% END %]
이라하면, Hi 안녕 Hello 가 아니라 Hi Hello 안녕 이 됨.
(3) IF, ELSIF, ELSE 도 사용가능. (그 외 switch case, while, foreach 등등도 마찬가지로 사용가능하다)
[% IF age < 10 %] Hello [% END %] 이고 age 를 8로 설정하고 process 했다면 Hello 가 출력됨.

============================================ 3. Verilog =============================================================
============================================ 4. Getopt:Long =========================================================
펄 코드에 옵션 던지는 패키지임.
#############################
# getopt.pl
#############################
GetOptions ( 'name=s' => \$name, 'employed!' => \$employed, );
print "I am $name, and". ($employed? '':'un'). "employed.\n";
#############################
# 실행 : perl getopt.pl -name Jaesik -employed
# 결과 : I am Jaesik, and employed.
#############################

========================================= 5. File::Find =============================================================
펄 코드가 실행되는 위치에서부터 하위 디렉토리까지 찾음
##############################
# filefind.pl
##############################
find ( { wanted -> \&findfiles, }, 'template' );
sub findfiles { print "$File::Find::name, "; }
#############################
디렉토리 예시 : template/dummy/template
결과 : template, template/dummy, template/dummy/template
#############################


========================================= 6. File::Path =============================================================
디렉토리 만들고 삭제하는거임
##########################
# filepath.pl
#########################
use File::Path qw(make_path remove_tree);
@created = make_path('foo/bar/baz');
make_path('foo/bar/baz'); # 디렉토리 생성!
$remove_count = remove_tree('foo/bar/baz'); # foo/bar 까지는 살아있고 baz 만 삭제!

========================================= 7. File::Copy =============================================================
그냥 파일 복사 해주는거임
#######################
# filecopy.pl
use File::Copy;
$newfile = 'new.dat';
$oldfile = 'old.dat';
copy($newfile, $oldfile);
#######################
위와 같을때, new.dat 이 $PWD 에 생성되며 내용은 old.dat 과 
========================================= 8. File::Temp =============================================================
========================================= 9. File::Basename =========================================================
========================================= 10. IO::File ==============================================================
========================================= 11. Cwd ===================================================================
========================================= 12. Pod::Usage ============================================================
========================================= 13. IO::Tee ===============================================================
========================================= 14. File::Glob ============================================================
========================================= 15. Symbol ================================================================
========================================= 16. JSON::MaybeXS =========================================================
========================================= 17. Encode ================================================================
========================================= 18. Data::Dumper ==========================================================
========================================= 19. Capture::Tiny =========================================================
========================================= 20. Log::Log4perl =========================================================
